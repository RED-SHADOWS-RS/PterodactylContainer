# © Copyright RED SHADOWS | RS - Shadow-x78

name: Pterodactyl Containers

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags: ["v*"]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  SHOULD_PUSH: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}

jobs:
  build-java:
    name: Build Java ${{ matrix.version }} Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    strategy:
      matrix:
        version: [v8, v11, v17, v21]
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ env.SHOULD_PUSH }}
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        shell: /bin/bash -e {0}

      - name: Build Java ${{ matrix.version }} Container
        uses: docker/build-push-action@v5
        with:
          context: ./src/generic/java
          file: ./src/generic/java/${{ matrix.version }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ env.SHOULD_PUSH }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/java:${{ matrix.version }}

      - name: Test Java ${{ matrix.version }} Container
        run: |
          echo "========== TESTING JAVA ${{ matrix.version }} =========="
          docker run --name java-test-${{ matrix.version }} -d ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/java:${{ matrix.version }}
          sleep 5
          docker logs java-test-${{ matrix.version }} | head -n 20
          docker stop java-test-${{ matrix.version }}
          docker rm java-test-${{ matrix.version }}
        shell: /bin/bash -e {0}

      - name: Clean Docker Build Cache
        run: |
          echo "[+] Cleaning up Docker build cache..."
          docker buildx prune -a --cache -f
          echo "[✓] Build cache removed."
        shell: /bin/bash -e {0}

  build-nodejs:
    name: Build Node.js ${{ matrix.version }} Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    strategy:
      matrix:
        version: [v18, v20, v22]
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ env.SHOULD_PUSH }}
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        shell: /bin/bash -e {0}

      - name: Build Node.js ${{ matrix.version }} Container
        uses: docker/build-push-action@v5
        with:
          context: ./src/generic/nodejs
          file: ./src/generic/nodejs/${{ matrix.version }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ env.SHOULD_PUSH }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/nodejs:${{ matrix.version }}

      - name: Test Node.js ${{ matrix.version }} Container
        run: |
          echo "========== TESTING NODE.JS ${{ matrix.version }} =========="
          docker run --name nodejs-test-${{ matrix.version }} -d ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/nodejs:${{ matrix.version }}
          sleep 5
          docker exec nodejs-test-${{ matrix.version }} node -v
          docker stop nodejs-test-${{ matrix.version }}
          docker rm nodejs-test-${{ matrix.version }}
        shell: /bin/bash -e {0}

      - name: Clean Docker Build Cache
        run: |
          echo "[+] Cleaning up Docker build cache..."
          docker buildx prune -a --cache -f
          echo "[✓] Build cache removed."
        shell: /bin/bash -e {0}

  build-python:
    name: Build Python ${{ matrix.version }} Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    strategy:
      matrix:
        version: [v3.9, v3.10, v3.11, v3.12]
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ env.SHOULD_PUSH }}
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        shell: /bin/bash -e {0}

      - name: Build Python ${{ matrix.version }} Container
        uses: docker/build-push-action@v5
        with:
          context: ./src/generic/python
          file: ./src/generic/python/${{ matrix.version }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ env.SHOULD_PUSH }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/python:${{ matrix.version }}

      - name: Test Python ${{ matrix.version }} Container
        run: |
          echo "========== TESTING PYTHON ${{ matrix.version }} =========="
          docker run --name python-test-${{ matrix.version }} -d ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/python:${{ matrix.version }}
          sleep 5
          docker exec python-test-${{ matrix.version }} python${{ matrix.version }} --version
          docker stop python-test-${{ matrix.version }}
          docker rm python-test-${{ matrix.version }}
        shell: /bin/bash -e {0}

      - name: Clean Docker Build Cache
        run: |
          echo "[+] Cleaning up Docker build cache..."
          docker buildx prune -a --cache -f
          echo "[✓] Build cache removed."
        shell: /bin/bash -e {0}

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-java, build-nodejs, build-python]
    if: always()
    steps:
      - name: Generate Build Report
        run: |
          echo "================ BUILD SUMMARY ================"
          echo "Java:     ${{ needs.build-java.result }}"
          echo "Node.js:  ${{ needs.build-nodejs.result }}"
          echo "Python:   ${{ needs.build-python.result }}"
          echo "------------------------------------------------"

          if [[ "${{ needs.build-java.result }}" != "success" || \
                "${{ needs.build-nodejs.result }}" != "success" || \
                "${{ needs.build-python.result }}" != "success" ]]; then
            echo "[!] Some builds failed! Please check the logs."
            exit 1
          else
            echo "[✓] All images built successfully!"
          fi
        shell: /bin/bash -e {0}

      - name: Final Docker Cleanup
        if: success() || failure()
        run: |
          echo "[+] Starting final Docker cleanup..."

          echo "[+] Cleaning up all Docker containers..."
          docker container prune -f

          echo "[+] Cleaning up unused Docker images..."
          docker image prune -a -f

          echo "[+] Cleaning up Docker Buildx cache..."
          docker buildx prune -a --cache -f

          echo "[✓] Final cleanup completed successfully."
        shell: /bin/bash -e {0}
